This file is not a real documentation for Selene (that still has to come) but only a list of thinks I have to take in account when I'll write this famous documentation.

Compilation options :
=====================

Following directives have to be added to enable some features.

DirectFB :
----------
-DUSE_DIRECTFB
`directfb-config --cflags` `directfb-config --libs`

MQTT (paho)
-----------
-DUSE_MQTT
-lpaho-mqtt3c

(-lpthread not required)


Runtime options
===============
Following DirectFB may be useful :

--dfb:quiet : Remove DirectFB verbosity

--dfb:no-vt : Make it working for a non-root user from ssh 
(the user has to be belong to 'video' group)

--dfb:no-cursor : hide cursor

General
=======

SELENE_VERSION - majeur.minorsub (i.e. 0.0112 => major :0, minor : 1, subversion : 12)

__SELENE_FUNCREF : internal use only (store function references)

Sleep() : make the process sleeping. The argument, in second, may be a float
Detach() : run a function in a dedicated thread (see callbacks note bellow)

DirectFB
========

SetCooperativeLevel() :
	acceleration_flags,
	blitting_flags
	drawing_flags

createfont( fontname, { size=int } )

font:SetEncoding() can take a string or a id (int) as argument.
In case of string it is converted to id.

createsurface()
	caps : DFBSurfaceCapabilities
	width
	height
	size={w,h}

Layer.CreateWindow()
	caps : DFBWindowCapabilities
	surface_caps : DFBSurfaceCapabilities
	options : DFBWindowOptions
	stacking : DFBWindowStackingClass
	width
	height
	size={w,h}
	x
	y
	pos={x,y}

SelMQTT.connect()
	keepAliveInterval : int (seconds)
	cleansession : bool
	reliable : bool
	username
	password
	clientID : string 
	persistence : string - if set, indicate the persistence directory
						- if not set, no persistence (data only stored in memory)

Curses
======
SelCWindow = SelCurses.init() : initialize the screen (initscr())
SelCurses.raw() and cbreak() : as ncurses does
SelCurses.echo() : 
	true : (or no argument) enable echo
	false : disable (noecho() exists as well for compatiblity purposes)
SelCWindow.print() display a string : Notez-bien, the string can't be a C formating string
	as waddstr() is used internally

Following functions doesn't follow nCurses function names in order to avoid mistakes
as arguments aren't in the same order.
x,y = SelCWindow.GetSize() - replaces getmaxyx()
SelCWindow.PrintAt(x,y,str) - replaces mvaddstr()

MQTT
====

Only textual topic and messages are correctly handled. Result is not defined for non-textual object

SelMQTT.connect()'s arguments :
	* KeepAliveInterval
	* cleansession
	* reliable
	* username
	* password
	* persistence
	* clientID
	* OnDisconnect - function called in a separate thread (see callbacks note bellow)
	* OnDisconnectTrigger - function push in todo list (handled as todo function, in the main thread, so can use DirectFB as well)

For Brk:subscribe()
	* func : callback (see note bellow) called at message arrival. Typically, used to set a SelShared object.
	* trigger : function running in the main application context mostly used to updated the GUI because the corresponding SelShared has changed.

If both func and trigger are defined, trigger is put in todo list only if func return true.
If func is not defined, a shared variable is created with the name of the topic and trigger added to the todo list if existing.

	* trigger_once : true if the trigger has to be launched once (default)
			false if the trigger will be launched as many as arrived messages

	* watchdog : SelTimer to use as a watchdog. It has to be initialised separately and will be reseted at data arrival.

Timer
=====

SelTimer.create()
	when : initial timer value
	interval : repeat at interval seconds (0 = one shot)
	clockid : clock to use (ClockModeConst()'s CLOCK_REALTIME or CLOCK_MONOTONIC)
	ifunc : function to be called "immediately" when the timer expires (immediately, means as soon as possible and when WaitFor() is called)
	task : function to add in the todo list
	once : if true, this function is put only once


Callback note :
===============

* callbacks can access to global variables ... but as they aren't protected against parallel access, it's really safer to use SelShared object
* as I'm not sure DirectFB, Paho MQTT, ... are thread safe (I mean, having parallel contexts, parallel broker connection, or such). Consequently, only SelShared is exposed in callbacks.

TODO :
======

DEV NOTE :
==========

Doc generation :
================
Disable preprocessor in Doxygen

***

