#!./Selene

-- Ensure we're not using obsolete version
assert( SELENE_VERSION >= 0.0300, "HDB requires at least Selene v0.0300" )

MQTT_URL='tcp://bpi.chez.moi:1883' -- URL where to connect to the broker
MQTT_ClientID='TstT'	-- Broker client ID : must be unique across the system

-- Collection for graphics
dt_pwr = SelCollection.create( 150/5 )
dt_conso = SelCollection.create( 150/5 )

-- Broker's stuffs
local Brk, err = SelMQTT.connect( MQTT_URL, { reliable=false, clientID=MQTT_ClientID } )

function rcvVal( topic, val )
	SelShared.set(topic, val)
	return true
end

function updateVlt()
	print('Voltage', SelShared.get('onduleur/input.voltage') .. ' V')
end

function updateConso()
	local v = SelShared.get('TeleInfo/Consommation/values/PAPP')
	print('Conso', v ..' VA')

	dt_conso:Push(v)
	local min,max = dt_conso:MinMax()
	print('max Conso', max)
end

function updateProduction()
	print('Production', SelShared.get('TeleInfo/Production/values/PAPP') .. ' VA')
end

function updateTGN()
	print('TGN', SelShared.get('maison/Temperature/Grenier Nord') .. "°C" )
end

function updateTChJ()
	print('TChJ', SelShared.get('maison/Temperature/Chambre Joris') .. "°C" )
end

function updateTSalon()
	print('TSalon', SelShared.get('maison/Temperature/Salon') .. "°C" )
end

function updateTBureau()
	print('TBureau', SelShared.get('maison/Temperature/Bureau') .. "°C" )
end

function updateTDehors()
	print('TDehors', SelShared.get('maison/Temperature/Dehors') .. "°C" )
end

function updateTCave()
	print('Tcave', SelShared.get('maison/Temperature/Cave') .. "°C" )
end

function updateUPSLd()
	local maxp = tonumber( SelShared.get('onduleur/ups.realpower.nominal') )
	if maxp then -- maximum power not known yet
		print('ConsoUPS', string.format('%3.1f', SelShared.get('onduleur/ups.load')*maxp/100) .. ' W')
	else
		print('ConsoUPS', SelShared.get('onduleur/ups.load') .. ' %')
	end
	local pw = 150 * SelShared.get('onduleur/ups.load') / 100
end

function updateInternet()
	local intDn = tonumber( SelShared.get('Freebox/DownloadATM') )
	local intUp = tonumber( SelShared.get('Freebox/UploadATM') )
	if intDn and intUp then
		print('Internet', intDn .. ' Kb / ' .. intUp ..' Kb' )
	end
end

function updatedWAN()
	local intDn = tonumber( SelShared.get('Freebox/DownloadATM') )
	local wanDn = tonumber( SelShared.get('Freebox/DownloadWAN') )
	if intDn then
		local pw = 150 * wanDn * 8 / intDn
	end
end

function updateuWAN()
	local intUp = tonumber( SelShared.get('Freebox/UploadATM') )
	local wanUp = tonumber( SelShared.get('Freebox/UploadWAN') )
	if intUp then
		local pw = 150 * wanUp * 8 / intUp
	end
end

_, err = Brk:subscribe({
	{ topic = "Freebox/DownloadWAN", func=rcvVal, trigger=updatedWAN, trigger_once=true },
	{ topic = "Freebox/UploadWAN", func=rcvVal, trigger=updateuWAN, trigger_once=true },
	{ topic = "Freebox/DownloadATM", func=rcvVal },
	{ topic = "Freebox/UploadATM", func=rcvVal, trigger=updateInternet, trigger_once=true },
	{ topic = "onduleur/ups.realpower.nominal", func=rcvVal },
	{ topic = "onduleur/ups.load", func=rcvVal, trigger=updateUPSLd, trigger_once=true },
	{ topic = "maison/Temperature/Grenier Nord", func=rcvVal, trigger=updateTGN, trigger_once=true },
	{ topic = "maison/Temperature/Chambre Joris", func=rcvVal, trigger=updateTChJ, trigger_once=true },
	{ topic = "maison/Temperature/Salon", func=rcvVal, trigger=updateTSalon, trigger_once=true },
	{ topic = "maison/Temperature/Bureau", func=rcvVal, trigger=updateTBureau, trigger_once=true },
	{ topic = "maison/Temperature/Dehors", func=rcvVal, trigger=updateTDehors, trigger_once=true },
	{ topic = "maison/Temperature/Cave", func=rcvVal, trigger=updateTCave, trigger_once=true },
	{ topic = "onduleur/input.voltage", func=rcvVal, trigger=updateVlt, trigger_once=true },
	{ topic = "TeleInfo/Consommation/values/PAPP", func=rcvVal, trigger=updateConso, trigger_once=true },
	{ topic = "TeleInfo/Production/values/PAPP", func=rcvVal, trigger=updateProduction, trigger_once=true }
})

if err then
	print( err )
	return
end

-- Timer for tablet figures
function updateTablet()
	local cols = {
		[1.5] = COL_GREEN,
		[2.75] = COL_ORANGE,
		[4] = COL_RED
	}

	local f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/axp20-supplyer.28/power_supply/ac/voltage_now" )
	local v = f:read('*number') / 1000000
	f:close()
	f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/axp20-supplyer.28/power_supply/ac/current_now" )
	v = v * f:read('*number') / 1000000
	f:close()
	print('TabPower', string.format('%3.2f', v) .. ' W')
	dt_pwr:Push( v )
	local min,max = dt_pwr:MinMax()
	print('TabPowerMax', string.format('%3.2f', max) )

	cols = {
		[30] = COL_DIGIT,
		[40] = COL_ORANGE
	}
	f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/temp1_input" )
	v = f:read('*number') / 1000
	f:close()
	print('TempPMU', string.format('%3.1f', v) .. '°C')

	f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/axp20-supplyer.28/power_supply/battery/temp" )
	v = f:read('*number') / 10
	f:close()
	print('TempBat', string.format('%3.1f', v) .. '°C')
end

tabtimer,err = SelTimer.create { when=1, interval=1, clockid=SelTimer.ClockModeConst("CLOCK_MONOTONIC"), ifunc=updateTablet}
if err then
	print(err)
	return
end

-- Wait for events
while true do
	ret, err = Selene.WaitFor(tabtimer)

	if type(ret) == 'function' then
		ret()
	end
end
